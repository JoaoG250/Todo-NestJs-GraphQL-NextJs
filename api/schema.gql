# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthTokens {
  accessToken: String!
  refreshToken: String!
}

input CreateTodoInput {
  description: String!
  title: String!
}

input FilterTodoInput {
  done: Boolean
}

type Mutation {
  createTodo(data: CreateTodoInput!): Todo!
  deleteTodo(id: ID!): Todo!
  login(email: String!, password: String!): AuthTokens!
  refreshToken(refreshToken: String!): AuthTokens!
  register(email: String!, name: String!, password: String!): Boolean!
  updateTodo(data: UpdateTodoInput!, id: ID!): Todo!
}

type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  me: User!
  todo(id: ID!): Todo
  todos(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String
    filter: FilterTodoInput

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TodoConnection!
  user(id: ID!): User!
  users(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): UserConnection!
}

type Todo {
  description: String!
  done: Boolean!
  id: ID!
  title: String!
}

type TodoConnection {
  edges: [TodoEdge!]!
  pageInfo: PageInfo!
}

type TodoEdge {
  cursor: String!
  node: Todo!
}

input UpdateTodoInput {
  description: String!
  done: Boolean!
  title: String!
}

type User {
  email: String!
  id: ID!
  name: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}